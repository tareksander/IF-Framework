{"version":3,"file":"service.js","mappings":"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","sources":["webpack://cloak-of-darkness/../framework/service.ts","webpack://cloak-of-darkness/../framework/src/service_worker/service_worker.ts","webpack://cloak-of-darkness/../framework/src/service_worker/shared.ts","webpack://cloak-of-darkness/webpack/bootstrap","webpack://cloak-of-darkness/webpack/runtime/define property getters","webpack://cloak-of-darkness/webpack/runtime/global","webpack://cloak-of-darkness/webpack/runtime/hasOwnProperty shorthand","webpack://cloak-of-darkness/webpack/runtime/make namespace object","webpack://cloak-of-darkness/./src/service.ts"],"sourcesContent":["export *  from \"./src/service_worker/service_worker\";\n","import { cacheName, ServiceWorkerMessage, configPath, updateChannel, SWConfig, ServiceWorkerResponseCheck } from \"./shared\";\n\nexport function setupSW(sw: ServiceWorkerGlobalScope) {\n    \n    async function conf() {\n        let configURL = new URL(configPath, sw.location.href);\n        let res: Response | undefined = await (await caches.open(cacheName)).match(configURL);\n        let c = await res!.json() as SWConfig;\n        return c;\n    }\n    \n    async function deleteCaches() {\n        Promise.all((await sw.caches.keys()).filter((k) => k != cacheName).map((k) => sw.caches.delete(k)));\n    }\n    \n    async function cacheFiles() {\n        const c = await sw.caches.open(cacheName);\n        await c.addAll((await conf()).cacheFiles);\n    }\n    \n    sw.addEventListener(\"install\", (event) => {\n        sw.skipWaiting();\n        event.waitUntil(cacheFiles());\n    });\n    \n    sw.addEventListener(\"activate\", (event) => {\n        event.waitUntil(Promise.all([sw.clients.claim(), deleteCaches()]));\n    });\n    \n    let recaching = false;\n    \n    async function recache() {\n        let channel = new BroadcastChannel(updateChannel);\n        let m: ServiceWorkerResponseCheck = {\n            type: \"check\",\n            available: false,\n        };\n        let configURL = new URL(configPath, sw.location.href);\n        let res: Response | undefined = await (await caches.open(cacheName)).match(configURL);\n        let c = await res!.json() as SWConfig;\n        try {\n            let newC = (await (await fetch(configURL, { cache: \"no-cache\" })).json()) as SWConfig;\n            if (newC.version > c.version) {\n                await cacheFiles();\n                (await caches.open(cacheName)).put(configURL, new Response(JSON.stringify(newC)));\n                m.available = true;\n                recaching = false;\n            } else {\n                recaching = false;\n            }\n        } catch {}\n        channel.postMessage(m);\n        channel.close();\n        recaching = false;\n    }\n    \n    sw.onmessage = (event) => {\n        let msg = event.data as ServiceWorkerMessage;\n        switch (msg.type) {\n            case \"check\": {\n                if (! recaching) {\n                    recaching = true;\n                    event.waitUntil(recache());\n                }\n            }\n        }\n    };\n    \n    const cacheFirst = async (request: Request) => {\n        const cached = await sw.caches.match(request, {\n            cacheName: cacheName\n        });\n        if (cached) {\n          return cached;\n        }\n        return fetch(request);\n      };\n    \n    sw.addEventListener(\"fetch\", (event) => {\n        event.respondWith(cacheFirst(event.request));\n    });\n}\n\n\n\n\n","/**\n * @file Shared definitions for the service worker and updater.\n */\n\n\nexport interface SWConfig {\n    cacheFiles: string[],\n    version: number,\n}\n\n/**\n * Cache name.\n */\nexport const cacheName = \"iff-cache\"\n\n/**\n * Config path relative to the service worker and story HTML file.\n */\nexport const configPath = \"./config.json\";\n/**\n * Channel name for broadcasting messages from the service worker.\n */\nexport const updateChannel = \"iff-update\";\n\n\n/**\n * Check for updates via the version field of the config file.\n */\nexport interface ServiceWorkerCheck {\n    type: \"check\",\n}\n\n/**\n * Messages accepted by the service worker.\n */\nexport type ServiceWorkerMessage = ServiceWorkerCheck;\n\n/**\n * Response to {@link ServiceWorkerCheck}.\n */\nexport interface ServiceWorkerResponseCheck {\n    type: \"check\",\n    /**\n     * True if an update was found and downloaded correctly and will be applied on page reloads. False otherwise.\n     */\n    available: boolean,\n}\n\n\n/**\n * Messages broadcasted by the service worker.\n */\nexport type ServiceWorkerResponseMessage = ServiceWorkerResponseCheck;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { setupSW } from \"@if-framework/framework/service\";\n\n// Just set up the default IF Framework service worker.\nsetupSW(global as unknown as ServiceWorkerGlobalScope);\n"],"names":["cacheName","configPath","updateChannel","setupSW","sw","conf","configURL","URL","location","href","res","caches","open","match","c","json","deleteCaches","Promise","all","keys","filter","k","map","delete","cacheFiles","addAll","addEventListener","event","skipWaiting","waitUntil","clients","claim","recaching","recache","channel","BroadcastChannel","m","type","available","newC","fetch","cache","version","put","Response","JSON","stringify","postMessage","close","onmessage","msg","data","cacheFirst","request","cached","respondWith","global"],"sourceRoot":""}